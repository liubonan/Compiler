package code_generator;
import nodes.*;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 03 19:41:54 EDT 2012
//----------------------------------------------------

import java_cup.runtime.*;


//----------------------------------------------------
//The following code was generated by CUP v0.11a beta 20060608
//Thu May 03 23:12:00 EDT 2012
//----------------------------------------------------

import java_cup.runtime.*;


//----------------------------------------------------
//The following code was generated by CUP v0.11a beta 20060608
//Thu May 03 23:59:59 EDT 2012
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
* @version Thu May 03 23:59:59 EDT 2012
*/
public class parser extends java_cup.runtime.lr_parser {

/** Default constructor. */
public parser() {super();}

/** Constructor which sets the default scanner. */
public parser(java_cup.runtime.Scanner s) {super(s);}

/** Constructor which sets the default scanner. */
public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

/** Production table. */
protected static final short _production_table[][] = 
  unpackFromStrings(new String[] {
  "\000\131\000\002\002\003\000\002\002\004\000\002\003" +
  "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
  "\000\002\005\005\000\002\006\003\000\002\006\006\000" +
  "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
  "\010\003\000\002\007\010\000\002\007\010\000\002\011" +
  "\003\000\002\011\002\000\002\012\005\000\002\012\003" +
  "\000\002\013\004\000\002\013\010\000\002\017\006\000" +
  "\002\014\004\000\002\014\002\000\002\015\004\000\002" +
  "\015\002\000\002\016\003\000\002\016\003\000\002\016" +
  "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
  "\000\002\016\004\000\002\016\004\000\002\025\005\000" +
  "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
  "\024\004\000\002\024\003\000\002\024\003\000\002\026" +
  "\007\000\002\027\005\000\002\027\010\000\002\027\007" +
  "\000\002\027\012\000\002\020\007\000\002\020\011\000" +
  "\002\021\013\000\002\022\004\000\002\022\003\000\002" +
  "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
  "\005\000\002\023\003\000\002\030\003\000\002\030\003" +
  "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
  "\002\030\003\000\002\031\005\000\002\031\004\000\002" +
  "\031\004\000\002\031\004\000\002\031\003\000\002\032" +
  "\005\000\002\032\003\000\002\033\003\000\002\033\003" +
  "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
  "\002\033\003\000\002\033\003\000\002\033\005\000\002" +
  "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
  "\003\000\002\037\003\000\002\034\003\000\002\034\006" +
  "\000\002\035\006\000\002\040\003\000\002\040\002\000" +
  "\002\041\005\000\002\041\003" });

/** Access to production table. */
public short[][] production_table() {return _production_table;}

/** Parse-action table. */
protected static final short[][] _action_table = 
  unpackFromStrings(new String[] {
  "\000\243\000\014\005\016\006\005\010\006\022\004\023" +
  "\010\001\002\000\004\026\ufff7\001\002\000\004\026\ufff5" +
  "\001\002\000\004\026\ufff6\001\002\000\016\002\ufffe\005" +
  "\ufffe\006\ufffe\010\ufffe\022\ufffe\023\ufffe\001\002\000\004" +
  "\026\241\001\002\000\004\002\240\001\002\000\016\002" +
  "\001\005\016\006\005\010\006\022\004\023\010\001\002" +
  "\000\016\002\ufffc\005\ufffc\006\ufffc\010\ufffc\022\ufffc\023" +
  "\ufffc\001\002\000\004\026\017\001\002\000\016\002\ufffd" +
  "\005\ufffd\006\ufffd\010\ufffd\022\ufffd\023\ufffd\001\002\000" +
  "\004\026\ufff8\001\002\000\010\036\021\052\022\054\023" +
  "\001\002\000\070\002\ufffb\005\ufffb\006\ufffb\010\ufffb\011" +
  "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
  "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\026\ufffb\027\ufffb\030" +
  "\ufffb\032\ufffb\051\ufffb\052\ufffb\054\ufffb\056\ufffb\057\ufffb" +
  "\060\ufffb\061\ufffb\062\ufffb\001\002\000\004\060\234\001" +
  "\002\000\014\005\016\006\005\010\006\022\004\053\ufff1" +
  "\001\002\000\070\002\ufffa\005\ufffa\006\ufffa\010\ufffa\011" +
  "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
  "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\026\ufffa\027\ufffa\030" +
  "\ufffa\032\ufffa\051\ufffa\052\ufffa\054\ufffa\056\ufffa\057\ufffa" +
  "\060\ufffa\061\ufffa\062\ufffa\001\002\000\006\053\ufff2\055" +
  "\232\001\002\000\004\026\225\001\002\000\006\053\uffef" +
  "\055\uffef\001\002\000\004\053\030\001\002\000\004\056" +
  "\032\001\002\000\016\002\ufff4\005\ufff4\006\ufff4\010\ufff4" +
  "\022\ufff4\023\ufff4\001\002\000\064\005\uffea\006\uffea\010" +
  "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
  "\017\uffea\020\uffea\021\uffea\022\uffea\026\uffea\027\uffea\030" +
  "\uffea\032\uffea\051\uffea\052\uffea\054\uffea\056\uffea\057\uffea" +
  "\060\uffea\061\uffea\062\uffea\001\002\000\064\005\016\006" +
  "\005\010\006\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
  "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\004\026\uffe8\027" +
  "\uffe8\030\uffe8\032\uffe8\051\uffe8\052\uffe8\054\uffe8\056\uffe8" +
  "\057\uffe8\060\uffe8\061\uffe8\062\uffe8\001\002\000\054\011" +
  "\051\012\061\013\076\014\062\015\053\016\065\017\046" +
  "\020\043\021\072\026\102\027\057\030\064\032\054\051" +
  "\060\052\077\054\050\056\032\057\073\060\075\061\045" +
  "\062\055\001\002\000\004\026\037\001\002\000\064\005" +
  "\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
  "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\026" +
  "\uffeb\027\uffeb\030\uffeb\032\uffeb\051\uffeb\052\uffeb\054\uffeb" +
  "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000" +
  "\006\036\021\054\023\001\002\000\050\024\uffbb\025\uffbb" +
  "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\041" +
  "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
  "\050\uffbb\053\uffbb\054\uffbb\055\uffbb\001\002\000\004\054" +
  "\224\001\002\000\004\054\223\001\002\000\006\025\211" +
  "\052\210\001\002\000\042\024\uffca\025\uffca\031\205\032" +
  "\206\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
  "\046\uffca\047\uffca\050\uffca\053\uffca\054\uffca\055\uffca\001" +
  "\002\000\050\024\uffb7\025\uffb7\031\uffb7\032\uffb7\033\uffb7" +
  "\034\uffb7\035\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
  "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\053\uffb7\054\uffb7" +
  "\055\uffb7\001\002\000\004\024\200\001\002\000\004\054" +
  "\uffda\001\002\000\056\007\uffe7\011\uffe7\012\uffe7\013\uffe7" +
  "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\026" +
  "\uffe7\027\uffe7\030\uffe7\032\uffe7\051\uffe7\052\uffe7\054\uffe7" +
  "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002\000" +
  "\024\026\102\027\057\030\064\032\054\051\060\052\077" +
  "\060\075\061\045\062\055\001\002\000\056\007\uffe6\011" +
  "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
  "\020\uffe6\021\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\051" +
  "\uffe6\052\uffe6\054\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
  "\062\uffe6\001\002\000\004\052\166\001\002\000\010\026" +
  "\165\027\162\060\164\001\002\000\050\024\uffb6\025\uffb6" +
  "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\041" +
  "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
  "\050\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000\004\054" +
  "\uffd9\001\002\000\050\024\uffba\025\uffba\031\uffba\032\uffba" +
  "\033\uffba\034\uffba\035\uffba\037\uffba\041\uffba\042\uffba\043" +
  "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\053\uffba" +
  "\054\uffba\055\uffba\001\002\000\024\026\102\027\057\030" +
  "\064\032\054\051\060\052\077\060\075\061\045\062\055" +
  "\001\002\000\024\026\102\027\057\030\064\032\054\051" +
  "\060\052\077\060\075\061\045\062\055\001\002\000\024" +
  "\026\102\027\057\030\064\032\054\051\060\052\077\060" +
  "\075\061\045\062\055\001\002\000\004\054\156\001\002" +
  "\000\050\024\uffb8\025\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
  "\uffb8\035\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
  "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\053\uffb8\054\uffb8\055" +
  "\uffb8\001\002\000\004\052\150\001\002\000\004\054\147" +
  "\001\002\000\040\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
  "\uffbc\040\145\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
  "\046\uffbc\047\uffbc\050\uffbc\054\uffbc\001\002\000\024\041" +
  "\114\042\115\043\117\044\112\045\116\046\113\047\121" +
  "\050\111\054\144\001\002\000\054\011\uffe9\012\uffe9\013" +
  "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
  "\026\uffe9\027\uffe9\030\uffe9\032\uffe9\051\uffe9\052\uffe9\054" +
  "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\001\002" +
  "\000\026\026\102\027\057\030\064\032\054\051\060\052" +
  "\077\054\uffcf\060\075\061\045\062\055\001\002\000\072" +
  "\002\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
  "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
  "\021\uffec\022\uffec\023\uffec\026\uffec\027\uffec\030\uffec\032" +
  "\uffec\051\uffec\052\uffec\054\uffec\056\uffec\057\uffec\060\uffec" +
  "\061\uffec\062\uffec\001\002\000\050\024\uffbf\025\uffbf\031" +
  "\uffbf\032\uffbf\033\141\034\140\035\136\037\uffbf\041\uffbf" +
  "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
  "\uffbf\053\uffbf\054\uffbf\055\uffbf\001\002\000\050\024\uffb9" +
  "\025\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037" +
  "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
  "\047\uffb9\050\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002\000" +
  "\024\026\102\027\057\030\064\032\054\051\060\052\077" +
  "\060\075\061\045\062\055\001\002\000\024\026\102\027" +
  "\057\030\064\032\054\051\060\052\077\060\075\061\045" +
  "\062\055\001\002\000\004\054\132\001\002\000\050\024" +
  "\uffbd\025\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
  "\037\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
  "\uffbd\047\uffbd\050\uffbd\053\uffbd\054\uffbd\055\uffbd\001\002" +
  "\000\056\024\uffaf\025\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
  "\uffaf\035\uffaf\036\103\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
  "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\052" +
  "\104\053\uffaf\054\uffaf\055\uffaf\001\002\000\024\026\102" +
  "\027\057\030\064\032\054\051\060\052\077\060\075\061" +
  "\045\062\055\001\002\000\026\026\102\027\057\030\064" +
  "\032\054\051\060\052\077\053\uffab\060\075\061\045\062" +
  "\055\001\002\000\006\053\uffac\055\126\001\002\000\004" +
  "\053\125\001\002\000\026\041\114\042\115\043\117\044" +
  "\112\045\116\046\113\047\121\050\111\053\uffa9\055\uffa9" +
  "\001\002\000\050\024\uffbc\025\uffbc\031\uffbc\032\uffbc\033" +
  "\uffbc\034\uffbc\035\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc" +
  "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\053\uffbc\054" +
  "\uffbc\055\uffbc\001\002\000\024\026\102\027\057\030\064" +
  "\032\054\051\060\052\077\060\075\061\045\062\055\001" +
  "\002\000\024\026\uffc6\027\uffc6\030\uffc6\032\uffc6\051\uffc6" +
  "\052\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002\000\024\026" +
  "\uffc4\027\uffc4\030\uffc4\032\uffc4\051\uffc4\052\uffc4\060\uffc4" +
  "\061\uffc4\062\uffc4\001\002\000\024\026\uffc7\027\uffc7\030" +
  "\uffc7\032\uffc7\051\uffc7\052\uffc7\060\uffc7\061\uffc7\062\uffc7" +
  "\001\002\000\024\026\uffc9\027\uffc9\030\uffc9\032\uffc9\051" +
  "\uffc9\052\uffc9\060\uffc9\061\uffc9\062\uffc9\001\002\000\024" +
  "\026\uffc5\027\uffc5\030\uffc5\032\uffc5\051\uffc5\052\uffc5\060" +
  "\uffc5\061\uffc5\062\uffc5\001\002\000\024\026\uffc8\027\uffc8" +
  "\030\uffc8\032\uffc8\051\uffc8\052\uffc8\060\uffc8\061\uffc8\062" +
  "\uffc8\001\002\000\024\026\102\027\057\030\064\032\054" +
  "\051\060\052\077\060\075\061\045\062\055\001\002\000" +
  "\024\026\102\027\057\030\064\032\054\051\060\052\077" +
  "\060\075\061\045\062\055\001\002\000\036\024\uffce\025" +
  "\uffce\037\uffce\041\114\042\115\043\117\044\112\045\116" +
  "\046\113\047\uffce\050\111\053\uffce\054\uffce\055\uffce\001" +
  "\002\000\036\024\uffcb\025\uffcb\037\uffcb\041\114\042\115" +
  "\043\117\044\112\045\116\046\113\047\121\050\111\053" +
  "\uffcb\054\uffcb\055\uffcb\001\002\000\036\024\uffcd\025\uffcd" +
  "\037\uffcd\041\114\042\115\043\117\044\112\045\116\046" +
  "\113\047\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd\001\002" +
  "\000\050\024\uffad\025\uffad\031\uffad\032\uffad\033\uffad\034" +
  "\uffad\035\uffad\037\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
  "\045\uffad\046\uffad\047\uffad\050\uffad\053\uffad\054\uffad\055" +
  "\uffad\001\002\000\024\026\102\027\057\030\064\032\054" +
  "\051\060\052\077\060\075\061\045\062\055\001\002\000" +
  "\026\041\114\042\115\043\117\044\112\045\116\046\113" +
  "\047\121\050\111\053\uffaa\055\uffaa\001\002\000\024\037" +
  "\131\041\114\042\115\043\117\044\112\045\116\046\113" +
  "\047\121\050\111\001\002\000\052\024\uffae\025\uffae\031" +
  "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\040\uffae" +
  "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
  "\uffae\050\uffae\053\uffae\054\uffae\055\uffae\001\002\000\056" +
  "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
  "\uffe5\017\uffe5\020\uffe5\021\uffe5\026\uffe5\027\uffe5\030\uffe5" +
  "\032\uffe5\051\uffe5\052\uffe5\054\uffe5\056\uffe5\057\uffe5\060" +
  "\uffe5\061\uffe5\062\uffe5\001\002\000\024\041\114\042\115" +
  "\043\117\044\112\045\116\046\113\047\121\050\111\053" +
  "\134\001\002\000\050\024\uffb5\025\uffb5\031\uffb5\032\uffb5" +
  "\033\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043" +
  "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\053\uffb5" +
  "\054\uffb5\055\uffb5\001\002\000\024\041\114\042\115\043" +
  "\117\044\112\045\116\046\113\047\121\050\111\054\uffdc" +
  "\001\002\000\020\026\uffb0\027\uffb0\030\uffb0\052\uffb0\060" +
  "\uffb0\061\uffb0\062\uffb0\001\002\000\020\026\102\027\057" +
  "\030\064\052\077\060\075\061\045\062\055\001\002\000" +
  "\020\026\uffb1\027\uffb1\030\uffb1\052\uffb1\060\uffb1\061\uffb1" +
  "\062\uffb1\001\002\000\020\026\uffb2\027\uffb2\030\uffb2\052" +
  "\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000\050\024\uffbe" +
  "\025\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\037" +
  "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
  "\047\uffbe\050\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002\000" +
  "\024\041\114\042\115\043\117\044\112\045\116\046\113" +
  "\047\121\050\111\054\uffd0\001\002\000\056\007\uffe2\011" +
  "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
  "\020\uffe2\021\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\051" +
  "\uffe2\052\uffe2\054\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
  "\062\uffe2\001\002\000\024\026\102\027\057\030\064\032" +
  "\054\051\060\052\077\060\075\061\045\062\055\001\002" +
  "\000\026\041\114\042\115\043\117\044\112\045\116\046" +
  "\113\047\121\050\111\053\uffdf\054\uffdf\001\002\000\056" +
  "\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
  "\uffe0\017\uffe0\020\uffe0\021\uffe0\026\uffe0\027\uffe0\030\uffe0" +
  "\032\uffe0\051\uffe0\052\uffe0\054\uffe0\056\uffe0\057\uffe0\060" +
  "\uffe0\061\uffe0\062\uffe0\001\002\000\024\026\102\027\057" +
  "\030\064\032\054\051\060\052\077\060\075\061\045\062" +
  "\055\001\002\000\024\041\114\042\115\043\117\044\112" +
  "\045\116\046\113\047\121\050\111\053\152\001\002\000" +
  "\052\011\051\012\061\013\076\014\062\015\053\016\065" +
  "\017\046\020\043\021\072\026\102\027\057\030\064\032" +
  "\054\051\060\052\077\054\050\056\032\060\075\061\045" +
  "\062\055\001\002\000\006\007\154\054\uffd3\001\002\000" +
  "\052\011\051\012\061\013\076\014\062\015\053\016\065" +
  "\017\046\020\043\021\072\026\102\027\057\030\064\032" +
  "\054\051\060\052\077\054\050\056\032\060\075\061\045" +
  "\062\055\001\002\000\004\054\uffd2\001\002\000\056\007" +
  "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
  "\017\uffe3\020\uffe3\021\uffe3\026\uffe3\027\uffe3\030\uffe3\032" +
  "\uffe3\051\uffe3\052\uffe3\054\uffe3\056\uffe3\057\uffe3\060\uffe3" +
  "\061\uffe3\062\uffe3\001\002\000\024\041\114\042\115\043" +
  "\117\044\112\045\116\046\113\047\121\050\111\054\uffdb" +
  "\001\002\000\024\041\114\042\115\043\117\044\112\045" +
  "\116\046\113\047\121\050\111\054\uffdd\001\002\000\036" +
  "\024\uffcc\025\uffcc\037\uffcc\041\114\042\115\043\117\044" +
  "\112\045\116\046\113\047\uffcc\050\uffcc\053\uffcc\054\uffcc" +
  "\055\uffcc\001\002\000\042\024\uffc1\025\uffc1\031\uffc1\032" +
  "\uffc1\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
  "\046\uffc1\047\uffc1\050\uffc1\053\uffc1\054\uffc1\055\uffc1\001" +
  "\002\000\042\024\uffc0\025\uffc0\031\uffc0\032\uffc0\037\uffc0" +
  "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
  "\uffc0\050\uffc0\053\uffc0\054\uffc0\055\uffc0\001\002\000\042" +
  "\024\uffc2\025\uffc2\031\uffc2\032\uffc2\037\uffc2\041\uffc2\042" +
  "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
  "\053\uffc2\054\uffc2\055\uffc2\001\002\000\046\024\uffaf\025" +
  "\uffaf\031\uffaf\032\uffaf\036\103\037\uffaf\040\uffaf\041\uffaf" +
  "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
  "\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000\004\026\165" +
  "\001\002\000\004\054\171\001\002\000\004\040\145\001" +
  "\002\000\024\026\102\027\057\030\064\032\054\051\060" +
  "\052\077\060\075\061\045\062\055\001\002\000\024\041" +
  "\114\042\115\043\117\044\112\045\116\046\113\047\121" +
  "\050\111\054\173\001\002\000\004\026\165\001\002\000" +
  "\004\053\175\001\002\000\052\011\051\012\061\013\076" +
  "\014\062\015\053\016\065\017\046\020\043\021\072\026" +
  "\102\027\057\030\064\032\054\051\060\052\077\054\050" +
  "\056\032\060\075\061\045\062\055\001\002\000\004\054" +
  "\uffd1\001\002\000\024\041\114\042\115\043\117\044\112" +
  "\045\116\046\113\047\121\050\111\054\uffde\001\002\000" +
  "\024\026\102\027\057\030\064\032\054\051\060\052\077" +
  "\060\075\061\045\062\055\001\002\000\024\024\202\041" +
  "\114\042\115\043\117\044\112\045\116\046\113\047\121" +
  "\050\111\001\002\000\024\026\102\027\057\030\064\032" +
  "\054\051\060\052\077\060\075\061\045\062\055\001\002" +
  "\000\024\041\114\042\115\043\117\044\112\045\116\046" +
  "\113\047\121\050\111\054\uffd8\001\002\000\020\026\102" +
  "\027\057\030\064\052\077\060\075\061\045\062\055\001" +
  "\002\000\020\026\uffb4\027\uffb4\030\uffb4\052\uffb4\060\uffb4" +
  "\061\uffb4\062\uffb4\001\002\000\020\026\uffb3\027\uffb3\030" +
  "\uffb3\052\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000\050" +
  "\024\uffc3\025\uffc3\031\uffc3\032\uffc3\033\141\034\140\035" +
  "\136\037\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
  "\046\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\055\uffc3\001" +
  "\002\000\024\026\102\027\057\030\064\032\054\051\060" +
  "\052\077\060\075\061\045\062\055\001\002\000\024\026" +
  "\102\027\057\030\064\032\054\051\060\052\077\060\075" +
  "\061\045\062\055\001\002\000\026\025\213\041\114\042" +
  "\115\043\117\044\112\045\116\046\113\047\121\050\111" +
  "\054\uffd7\001\002\000\024\026\102\027\057\030\064\032" +
  "\054\051\060\052\077\060\075\061\045\062\055\001\002" +
  "\000\024\041\114\042\115\043\117\044\112\045\116\046" +
  "\113\047\121\050\111\054\uffd5\001\002\000\024\041\114" +
  "\042\115\043\117\044\112\045\116\046\113\047\121\050" +
  "\111\053\216\001\002\000\004\025\217\001\002\000\024" +
  "\026\102\027\057\030\064\032\054\051\060\052\077\060" +
  "\075\061\045\062\055\001\002\000\026\025\221\041\114" +
  "\042\115\043\117\044\112\045\116\046\113\047\121\050" +
  "\111\054\uffd6\001\002\000\024\026\102\027\057\030\064" +
  "\032\054\051\060\052\077\060\075\061\045\062\055\001" +
  "\002\000\024\041\114\042\115\043\117\044\112\045\116" +
  "\046\113\047\121\050\111\054\uffd4\001\002\000\056\007" +
  "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
  "\017\uffe4\020\uffe4\021\uffe4\026\uffe4\027\uffe4\030\uffe4\032" +
  "\uffe4\051\uffe4\052\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4" +
  "\061\uffe4\062\uffe4\001\002\000\056\007\uffe1\011\uffe1\012" +
  "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
  "\021\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\051\uffe1\052" +
  "\uffe1\054\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
  "\001\002\000\010\036\226\053\uffee\055\uffee\001\002\000" +
  "\004\060\227\001\002\000\004\037\230\001\002\000\004" +
  "\054\231\001\002\000\006\053\uffed\055\uffed\001\002\000" +
  "\012\005\016\006\005\010\006\022\004\001\002\000\006" +
  "\053\ufff0\055\ufff0\001\002\000\004\037\235\001\002\000" +
  "\004\054\236\001\002\000\070\002\ufff9\005\ufff9\006\ufff9" +
  "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
  "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\026\ufff9" +
  "\027\ufff9\030\ufff9\032\ufff9\051\ufff9\052\ufff9\054\ufff9\056" +
  "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000\016" +
  "\002\uffff\005\uffff\006\uffff\010\uffff\022\uffff\023\uffff\001" +
  "\002\000\004\002\000\001\002\000\004\052\242\001\002" +
  "\000\014\005\016\006\005\010\006\022\004\053\ufff1\001" +
  "\002\000\004\053\244\001\002\000\004\056\032\001\002" +
  "\000\016\002\ufff3\005\ufff3\006\ufff3\010\ufff3\022\ufff3\023" +
  "\ufff3\001\002" });

/** Access to parse-action table. */
public short[][] action_table() {return _action_table;}

/** <code>reduce_goto</code> table. */
protected static final short[][] _reduce_table = 
  unpackFromStrings(new String[] {
  "\000\243\000\016\002\010\003\011\004\006\005\014\007" +
  "\012\010\013\001\001\000\002\001\001\000\002\001\001" +
  "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
  "\002\001\001\000\012\004\236\005\014\007\012\010\013" +
  "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
  "\001\000\002\001\001\000\004\006\017\001\001\000\002" +
  "\001\001\000\002\001\001\000\012\010\024\011\026\012" +
  "\023\013\025\001\001\000\002\001\001\000\002\001\001" +
  "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
  "\004\017\030\001\001\000\002\001\001\000\004\014\032" +
  "\001\001\000\010\005\035\010\034\015\033\001\001\000" +
  "\040\016\070\017\051\020\077\021\041\022\062\023\067" +
  "\024\040\025\065\026\046\027\055\031\043\032\073\033" +
  "\100\034\066\035\037\001\001\000\002\001\001\000\002" +
  "\001\001\000\004\006\017\001\001\000\002\001\001\000" +
  "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
  "\036\203\001\001\000\002\001\001\000\002\001\001\000" +
  "\002\001\001\000\002\001\001\000\016\023\176\031\043" +
  "\032\073\033\100\034\107\035\037\001\001\000\002\001" +
  "\001\000\002\001\001\000\004\034\162\001\001\000\002" +
  "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
  "\160\031\043\032\073\033\100\034\107\035\037\001\001" +
  "\000\016\023\157\031\043\032\073\033\100\034\107\035" +
  "\037\001\001\000\016\023\156\031\043\032\073\033\100" +
  "\034\107\035\037\001\001\000\002\001\001\000\002\001" +
  "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
  "\000\004\030\117\001\001\000\002\001\001\000\016\023" +
  "\142\031\043\032\073\033\100\034\107\035\037\001\001" +
  "\000\002\001\001\000\004\037\136\001\001\000\002\001" +
  "\001\000\016\023\134\031\043\032\073\033\100\034\107" +
  "\035\037\001\001\000\016\023\132\031\043\032\073\033" +
  "\100\034\107\035\037\001\001\000\002\001\001\000\002" +
  "\001\001\000\002\001\001\000\016\023\127\031\043\032" +
  "\073\033\100\034\107\035\037\001\001\000\022\023\106" +
  "\031\043\032\073\033\100\034\107\035\037\040\105\041" +
  "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
  "\030\117\001\001\000\002\001\001\000\016\023\123\031" +
  "\043\032\073\033\100\034\107\035\037\001\001\000\002" +
  "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
  "\001\000\002\001\001\000\002\001\001\000\016\023\122" +
  "\031\043\032\073\033\100\034\107\035\037\001\001\000" +
  "\016\023\121\031\043\032\073\033\100\034\107\035\037" +
  "\001\001\000\004\030\117\001\001\000\004\030\117\001" +
  "\001\000\004\030\117\001\001\000\002\001\001\000\016" +
  "\023\126\031\043\032\073\033\100\034\107\035\037\001" +
  "\001\000\004\030\117\001\001\000\004\030\117\001\001" +
  "\000\002\001\001\000\002\001\001\000\004\030\117\001" +
  "\001\000\002\001\001\000\004\030\117\001\001\000\002" +
  "\001\001\000\010\033\141\034\107\035\037\001\001\000" +
  "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
  "\030\117\001\001\000\002\001\001\000\016\023\145\031" +
  "\043\032\073\033\100\034\107\035\037\001\001\000\004" +
  "\030\117\001\001\000\002\001\001\000\016\023\150\031" +
  "\043\032\073\033\100\034\107\035\037\001\001\000\004" +
  "\030\117\001\001\000\040\016\152\017\051\020\077\021" +
  "\041\022\062\023\067\024\040\025\065\026\046\027\055" +
  "\031\043\032\073\033\100\034\066\035\037\001\001\000" +
  "\002\001\001\000\040\016\154\017\051\020\077\021\041" +
  "\022\062\023\067\024\040\025\065\026\046\027\055\031" +
  "\043\032\073\033\100\034\066\035\037\001\001\000\002" +
  "\001\001\000\002\001\001\000\004\030\117\001\001\000" +
  "\004\030\117\001\001\000\004\030\117\001\001\000\002" +
  "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
  "\001\000\006\025\166\034\167\001\001\000\002\001\001" +
  "\000\002\001\001\000\016\023\171\031\043\032\073\033" +
  "\100\034\107\035\037\001\001\000\004\030\117\001\001" +
  "\000\006\025\173\034\167\001\001\000\002\001\001\000" +
  "\040\016\175\017\051\020\077\021\041\022\062\023\067" +
  "\024\040\025\065\026\046\027\055\031\043\032\073\033" +
  "\100\034\066\035\037\001\001\000\002\001\001\000\004" +
  "\030\117\001\001\000\016\023\200\031\043\032\073\033" +
  "\100\034\107\035\037\001\001\000\004\030\117\001\001" +
  "\000\016\023\202\031\043\032\073\033\100\034\107\035" +
  "\037\001\001\000\004\030\117\001\001\000\012\032\206" +
  "\033\100\034\107\035\037\001\001\000\002\001\001\000" +
  "\002\001\001\000\004\037\136\001\001\000\016\023\214" +
  "\031\043\032\073\033\100\034\107\035\037\001\001\000" +
  "\016\023\211\031\043\032\073\033\100\034\107\035\037" +
  "\001\001\000\004\030\117\001\001\000\016\023\213\031" +
  "\043\032\073\033\100\034\107\035\037\001\001\000\004" +
  "\030\117\001\001\000\004\030\117\001\001\000\002\001" +
  "\001\000\016\023\217\031\043\032\073\033\100\034\107" +
  "\035\037\001\001\000\004\030\117\001\001\000\016\023" +
  "\221\031\043\032\073\033\100\034\107\035\037\001\001" +
  "\000\004\030\117\001\001\000\002\001\001\000\002\001" +
  "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
  "\000\002\001\001\000\002\001\001\000\006\010\024\013" +
  "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
  "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
  "\001\000\002\001\001\000\012\010\024\011\242\012\023" +
  "\013\025\001\001\000\002\001\001\000\004\017\244\001" +
  "\001\000\002\001\001" });

/** Access to <code>reduce_goto</code> table. */
public short[][] reduce_table() {return _reduce_table;}

/** Instance of action encapsulation class. */
protected CUP$parser$actions action_obj;

/** Action encapsulation object initializer. */
protected void init_actions()
  {
    action_obj = new CUP$parser$actions(this);
  }

/** Invoke a user supplied parse action. */
public java_cup.runtime.Symbol do_action(
  int                        act_num,
  java_cup.runtime.lr_parser parser,
  java.util.Stack            stack,
  int                        top)
  throws java.lang.Exception
{
  /* call code in generated class */
  return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
}

/** Indicates start state. */
public int start_state() {return 0;}
/** Indicates start production. */
public int start_production() {return 1;}

/** <code>EOF</code> Symbol index. */
public int EOF_sym() {return 0;}

/** <code>error</code> Symbol index. */
public int error_sym() {return 1;}


/** User initialization code. */
public void user_init() throws java.lang.Exception
  {
scanner.init();              
  }

/** Scan to get the next Symbol. */
public java_cup.runtime.Symbol scan()
  throws java.lang.Exception
  {
return getScanner().next_token(); 
  }

public static Node parseResult; 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
private final parser parser;

/** Constructor */
CUP$parser$actions(parser parser) {
  this.parser = parser;
}

/** Method with the actual generated action code. */
public final java_cup.runtime.Symbol CUP$parser$do_action(
  int                        CUP$parser$act_num,
  java_cup.runtime.lr_parser CUP$parser$parser,
  java.util.Stack            CUP$parser$stack,
  int                        CUP$parser$top)
  throws java.lang.Exception
  {
    /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$parser$result;

    /* select the action based on the action number */
    switch (CUP$parser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // arg_list ::= expression 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArgListNode(e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // arg_list ::= arg_list COMMA expression 
          {
            Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArgListNode(a, e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // args ::= 
          {
            Node RESULT =null;
		RESULT = null; 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("args",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // args ::= arg_list 
          {
            Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArgsNode(a); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("args",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // call ::= IDENTIFIER LEFT_PAREN args RIGHT_PAREN 
          {
            Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallNode(i, a);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("call",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // var ::= IDENTIFIER LEFT_BRKT expression RIGHT_BRKT 
          {
            Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarNode(i, e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // var ::= IDENTIFIER 
          {
            Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarNode(i);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // mulop ::= MOD 
          {
            Node RESULT =null;
		RESULT = new MulopNode("MOD");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // mulop ::= DIVIDE 
          {
            Node RESULT =null;
		RESULT = new MulopNode("DIVIDE");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // mulop ::= TIMES 
          {
            Node RESULT =null;
		RESULT = new MulopNode("TIMES");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // addop ::= MINUS 
          {
            Node RESULT =null;
		RESULT = new AddopNode("MINUS");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // addop ::= PLUS 
          {
            Node RESULT =null;
		RESULT = new AddopNode("ADD");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // factor ::= LEFT_PAREN expression RIGHT_PAREN 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FactorNode(e,"factor_expr");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // factor ::= F 
          {
            Node RESULT =null;
		RESULT = new FactorNode("F","factor_F");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // factor ::= T 
          {
            Node RESULT =null;
		RESULT = new FactorNode("T", "factor_T");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // factor ::= file 
          {
            Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FactorNode(f,"factor_file");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // factor ::= small 
          {
            Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FactorNode(s,"factor_small");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // factor ::= big 
          {
            Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FactorNode(b,"factor_big");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // factor ::= call 
          {
            Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FactorNode(c,"factor_call");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // factor ::= var 
          {
            Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FactorNode(v,"factor_var");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // term ::= factor 
          {
            Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TermNode(f);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // term ::= term mulop factor 
          {
            Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node m = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TermNode(t, m, f);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // additive_expression ::= term 
          {
            Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpressionNode(t);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // additive_expression ::= MINUS var 
          {
            Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpressionNode("var", v);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // additive_expression ::= MINUS big 
          {
            Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpressionNode("big", b);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // additive_expression ::= MINUS small 
          {
            Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpressionNode("small", s);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // additive_expression ::= additive_expression addop term 
          {
            Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node aop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpressionNode(a, aop, t);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // relop ::= NOT_EQ 
          {
            Node RESULT =null;
		RESULT = new RelopNode("NOT_EQ");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // relop ::= LESS_EQ 
          {
            Node RESULT =null;
		RESULT = new RelopNode("LESS_EQ");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // relop ::= GTR_EQ 
          {
            Node RESULT =null;
		RESULT = new RelopNode("GTR_EQ");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // relop ::= EQUAL 
          {
            Node RESULT =null;
		RESULT = new RelopNode("EQUAL");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // relop ::= LESS 
          {
            Node RESULT =null;
		RESULT = new RelopNode("LESS");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // relop ::= GTR 
          {
            Node RESULT =null;
		RESULT = new RelopNode("GTR");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expression ::= additive_expression 
          {
            Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode("AE", ae); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expression ::= expression relop expression 
          {
            Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node rop = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1,e2,rop);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expression ::= NOT expression 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode("NOT", e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expression ::= expression AND expression 
          {
            Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode("AND", e1,e2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expression ::= expression OR expression 
          {
            Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionNode("OR", e1,e2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // return_stmt ::= RETURN 
          {
            Node RESULT =null;
		RESULT = new Return_stmtNode();
            CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // return_stmt ::= RETURN expression 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Return_stmtNode(e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // for_stmt ::= FOR LEFT_PAREN assign_stmt SEMI expression SEMI assign_stmt RIGHT_PAREN statement 
          {
            Node RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node a1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new For_stmtNode(a1,e,a2,s);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // if_stmt ::= IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node s1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If_stmtNode(e, s1, s2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // if_stmt ::= IF LEFT_PAREN expression RIGHT_PAREN statement 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If_stmtNode(e, s);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // o_stmt ::= OUTPUT LEFT_PAREN expression RIGHT_PAREN FILEOUTPUT expression FILEOUTPUT expression 
          {
            Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OStmtNode(s, i1, i2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("o_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // o_stmt ::= OUTPUT FILEOUTPUT expression FILEOUTPUT expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OStmtNode(i1, i2, 2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("o_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // o_stmt ::= OUTPUT LEFT_PAREN expression RIGHT_PAREN FILEOUTPUT expression 
          {
            Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OStmtNode(s, i1, 1);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("o_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // o_stmt ::= OUTPUT FILEOUTPUT expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OStmtNode(i1);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("o_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // i_stmt ::= INPUT FILEINPUT expression FILEINPUT expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IStmtNode(i1, i2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("i_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // file_stmt ::= o_stmt 
          {
            Node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node o = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileStmtNode(o);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("file_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // file_stmt ::= i_stmt 
          {
            Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileStmtNode(i);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("file_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // file_stmt ::= OUTFILECLOSE expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileStmtNode("OUTFILECLOSE", i1); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("file_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // file_stmt ::= OUTFILEOPEN expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileStmtNode("OUTFILEOPEN", i1); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("file_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // file_stmt ::= INFILECLOSE expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileStmtNode("INFILECLOSE", i1); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("file_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // file_stmt ::= INFILEOPEN expression 
          {
            Node RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileStmtNode("INFILEOPEN", i1); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("file_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // assign_stmt ::= var ASSIGN expression 
          {
            Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmtNode(v, e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // statement ::= assign_stmt SEMI 
          {
            Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementNode("assign_stmt", a);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // statement ::= file_stmt SEMI 
          {
            Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementNode("file_stmt",f);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // statement ::= expression SEMI 
          {
            Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementNode("expression", e);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // statement ::= return_stmt SEMI 
          {
            Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementNode("return_stmt",r);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statement ::= for_stmt SEMI 
          {
            Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementNode("for_stmt",f);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statement ::= if_stmt SEMI 
          {
            Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementNode("if_stmt", i);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // statement ::= block 
          {
            Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatementNode("block", b);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statement ::= SEMI 
          {
            Node RESULT =null;
		RESULT = new StatementNode();
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statement_list ::= 
          {
            Node RESULT =null;
		 RESULT = null; 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // statement_list ::= statement_list statement 
          {
            Node RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node stmts = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatementListNode(stmts,stmt); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // local_var_declaration ::= 
          {
            Node RESULT =null;
		 RESULT = null; 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // local_var_declaration ::= local_var_declaration var_declaration 
          {
            Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LocalVarDeclarationNode(l,vd); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // block ::= LEFT_BRACE local_var_declaration statement_list RIGHT_BRACE 
          {
            Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BlockNode(l,stmt); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // param ::= type IDENTIFIER LEFT_BRKT small RIGHT_BRKT SEMI 
          {
            Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ParamNode(t,i,s); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // param ::= type IDENTIFIER 
          {
            Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamNode(t,i); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("param",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // param_list ::= param 
          {
            Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamListNode(p); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // param_list ::= param_list COMMA param 
          {
            Node RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node p1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamListNode(p1,p2); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // params ::= 
          {
            Node RESULT =null;
		 RESULT = null; 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // params ::= param_list 
          {
            Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamsNode(p); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // fun_declaration ::= VOID IDENTIFIER LEFT_PAREN params RIGHT_PAREN block 
          {
            Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunDeclarationNode(p,b,i); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // fun_declaration ::= type IDENTIFIER LEFT_PAREN params RIGHT_PAREN block 
          {
            Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunDeclarationNode(t,p,b,i);  
            CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // type ::= BOOL 
          {
            Node RESULT =null;
		 RESULT = new TypeNode("BOOL");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // type ::= FILE 
          {
            Node RESULT =null;
		 RESULT = new TypeNode("FILE");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // type ::= SMALL 
          {
            Node RESULT =null;
		 RESULT = new TypeNode("SMALL");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // type ::= BIG 
          {
            Node RESULT =null;
		 RESULT = new TypeNode("BIG");
            CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // var_declaration_tail ::= LEFT_BRKT small RIGHT_BRKT SEMI 
          {
            Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VarDeclarationTailNode(s); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_tail",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // var_declaration_tail ::= SEMI 
          {
            Node RESULT =null;
		 RESULT = new VarDeclarationTailNode(); 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_tail",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // var_declaration ::= type IDENTIFIER var_declaration_tail 
          {
            Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDeclarationNode(t, i, v);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // declaration ::= fun_declaration 
          {
            Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(f);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // declaration ::= var_declaration 
          {
            Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(v);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // declaration_list ::= declaration 
          {
            Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationListNode(d);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // declaration_list ::= declaration_list declaration 
          {
            Node RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationListNode(dl, d);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // $START ::= program EOF 
          {
            Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
            CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        /* ACCEPT */
        CUP$parser$parser.done_parsing();
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // program ::= declaration_list 
          {
            Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(d); parser.parseResult = RESULT; 
            CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
          }
        return CUP$parser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
             "Invalid action number found in internal parse table");

      }
  }
}


